
  /*Army Institute Of Technology, AIT, Pune
 * Mahavir Dwivedi,   mahaviredx@gmail.com
 */
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/adc.h"
#include "driverlib/uart.h"
#include "driverlib/interrupt.h"
#include "utils/uartstdio.h"
#include "inc/hw_timer.h"
#include "driverlib/timer.h"
#include "inc/hw_ints.h"
#include "driverlib/pin_map.h"


void WTimer1AIntHandler(void)
{
	int val=0;

	// Clear the timer interrupt
	TimerIntClear(WTIMER1_BASE, TIMER_TIMA_TIMEOUT);

	  //toggling the led connected to pin 1
	  val = GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1);
	  val = ~val;
	  val = val & GPIO_PIN_1;
	  GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, val);
	  value++;


}


int main(void)
{
	unsigned long int ulbase=0;

	/*Set the clocking to run at 80Mhz from the crystal of 16MHz using PLL*/
	SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

	/* Set the clock for the GPIO Port F */
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

	/* Set the type of the GPIO Pin */
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);

	/*Setting the led 1 initially as low*/
	GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1,0);

	/* Set the clock for the WTimer 1  */
	SysCtlPeripheralEnable(SYSCTL_PERIPH_WTIMER1);

	/* timer should be disabled before configuring it */
	TimerDisable(WTIMER1_BASE, TIMER_A);

	/* Configuring the timer in split pair mode */
    TimerConfigure(WTIMER1_BASE, TIMER_CFG_SPLIT_PAIR|TIMER_CFG_A_PERIODIC);

    /* setting the load value to 80000000  */
    ulbase=8000000;

    /* setting the load value to 80000000  */
    TimerLoadSet(WTIMER1_BASE, TIMER_A,ulbase);

    /* setting the prescalar value  */
    TimerPrescaleSet(WTIMER1_BASE,TIMER_A,0x0003);

    /* enabling the interrupt*/
    IntMasterEnable();

    /* setting the Timer interrupt register */
    TimerIntRegister(WTIMER1_BASE, TIMER_A, WTimer1AIntHandler);

    /* enabling the Timer interrupt*/
    TimerIntEnable(WTIMER1_BASE, TIMER_TIMA_TIMEOUT);

	IntEnable(INT_WTIMER1A);

	/* enabling the timer*/
	TimerEnable(WTIMER1_BASE,TIMER_A);

	while(1)
	{

	}

}
