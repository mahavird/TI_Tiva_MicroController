 /* Army Institute Of Technology,Pune
  * Mahavir Dwivedi ,mahaviredx@gmail.com
 *
 */

/* Defines the base address of the memories and peripherals */
#include "inc/hw_memmap.h"

/* Defines the common types and macros */
#include "inc/hw_types.h"

/* Defines and Macros for GPIO API */
#include "driverlib/gpio.h"

/* Prototypes for the system control driver */
#include "driverlib/sysctl.h"

/* Prototypes for the NVIC Interrupt Controller Driver. */
#include "driverlib/interrupt.h"

/*  Macros that define the interrupt assignment on Stellaris. */
#include "inc/hw_ints.h"

/* Driver for the SysTick timer in NVIC. */
#include "driverlib/systick.h"
#include "driverlib/uart.h"

#include "utils/uartstdio.h"
#include "inc/hw_timer.h"
#include "driverlib/timer.h"



volatile int j=0;
volatile unsigned long g_ulcount = 0;
int i,ulbase;
int l,buttonState;
int e[14];


void InitConsole(void)
{

	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);

    /* Make the UART pins be peripheral controlled. */
	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

	/* Initialize the UART for console I/O */
    UARTStdioInit(0);
}

void WTimer1AIntHandler(void)
{
	int val=0;

	// Clear the timer interrupt
	TimerIntClear(WTIMER1_BASE, TIMER_TIMA_TIMEOUT);

	  //toggling the led connected to pin 1
	  val = GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1);
	  val = ~val;
	  val = val & GPIO_PIN_1;
	  GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, val);

	  UARTprintf("inside interrupt of timer");

}

void Pin_Int(void)
	{

	/*Clear interrupt register*/
    GPIOPinIntClear(GPIO_PORTA_BASE, GPIO_PIN_2);


    //j=0x00;                                                    // decoding of RC5 protocol
        buttonState = GPIOPinRead(GPIO_PORTA_BASE,GPIO_PIN_2);
        if(GPIOPinRead(GPIO_PORTA_BASE,GPIO_PIN_2)==0)
        {
        	j=0x00;

        	SysCtlDelay(SysCtlClockGet()/30000);

          for(i=0;i<14;i++)
          {
            buttonState = GPIOPinRead(GPIO_PORTA_BASE,GPIO_PIN_2);
            if(GPIOPinRead(GPIO_PORTA_BASE,GPIO_PIN_2)==0)
            {
              e[i]=1;
            }
            else
            {
            e[i]=0;
            }

            SysCtlDelay(SysCtlClockGet()/1700);

          }
          for(i=8;i<14;i++)
          {
            if(e[i]==1)
            {
              j=j|0x01;
            }
            j<<=1;
          }

         /* UARTprintf("%d\n",j); //printing the decoded received bit


          if(j==60)
          		      {
          			     GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 ,GPIO_PIN_1 );
          		      }
          else
          {
			     GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 ,0);
          }
*/
        }


	}

int main(void)
{
	/* Set the clocking to directly run from the crystal at 16MHz */
	SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

	/* Set the clock for the GPIO Port A*/
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    /* Set the clock for the GPIO Port F*/
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    /* Set the clock for the WTimer 1  */
    SysCtlPeripheralEnable(SYSCTL_PERIPH_WTIMER1);

    /* timer should be disabled before configuring it */
    TimerDisable(WTIMER1_BASE, TIMER_A);

	/* Set the type of the GPIO Pin of PORT */
	GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, GPIO_PIN_2);

	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);

	GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 ,0);

	/*Register Interrupt to call Interrupt Handler*/
	GPIOPortIntRegister(GPIO_PORTA_BASE, Pin_Int);

	/*Clear interrupt register*/
	GPIOPinIntClear(GPIO_PORTA_BASE, GPIO_PIN_2);

	/*Configure GPIO pad with internal pull-up enabled*/
	GPIOPadConfigSet(GPIO_PORTA_BASE, GPIO_PIN_2, GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);

	/* Configuring the timer in split pair mode */
	TimerConfigure(WTIMER1_BASE, TIMER_CFG_SPLIT_PAIR|TIMER_CFG_A_PERIODIC);


	/*Set interrupt triggering sequence*/
	GPIOIntTypeSet(GPIO_PORTA_BASE, GPIO_PIN_2, GPIO_FALLING_EDGE);

	/*Enable interrupts on selected pin*/
	GPIOPinIntEnable(GPIO_PORTA_BASE, GPIO_PIN_2);

	if (j==60)
	 /* setting the load value to 80000000  */
	 {
		ulbase=8000000;


	/* setting the load value to 80000000  */
	    TimerLoadSet(WTIMER1_BASE, TIMER_A,ulbase);

	/* setting the pre scalar value  */
	TimerPrescaleSet(WTIMER1_BASE,TIMER_A,0x0003);


	/* setting the Timer interrupt register */
	TimerIntRegister(WTIMER1_BASE, TIMER_A, WTimer1AIntHandler);

    /* enabling the Timer interrupt*/
	TimerIntEnable(WTIMER1_BASE, TIMER_TIMA_TIMEOUT);

	IntEnable(INT_WTIMER1A);

	/* enabling the timer*/
	TimerEnable(WTIMER1_BASE,TIMER_A);
	UARTprintf("inside timer loop");

	 }

	/*Enable interrupts on selected port*/
	IntEnable(INT_GPIOA);

	/*Enabling the Uart */
	InitConsole();

	/*Enable global interrupts*/
	IntMasterEnable();
	UARTprintf("%d\n",j);

	while(1)
    {
		/* if(j==60)
		          		      {
		          			     GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 ,GPIO_PIN_1 );
		          		      }
		          else
		          {
					     GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 ,0);
		          }*/

    }

}
